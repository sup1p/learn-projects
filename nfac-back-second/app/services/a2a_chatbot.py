import asyncio
import os
from dotenv import load_dotenv
import openai
import google.generativeai as genai
from google.generativeai import GenerativeModel

load_dotenv()

os.environ["GOOGLE_API_KEY"] = os.getenv("GOOGLE_API_KEY")
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
gemini_model = GenerativeModel("gemini-1.5-flash-latest")
openai_client = openai.AsyncOpenAI(api_key=os.environ["OPENAI_API_KEY"])


async def gemini_response(context: str) -> str:
    """Gemini –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏."""
    prompt = f"–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ—é –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –ø–æ–≤–æ–¥—É:\n{context}"
    response = await gemini_model.generate_content_async(prompt)
    return response.text.strip()


async def gpt_response(context: str) -> str:
    """GPT-4o-mini –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏."""
    response = await openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Å–æ–≤–µ—Ç–Ω–∏–∫."},
            {"role": "user", "content": context},
        ],
    )
    return response.choices[0].message.content.strip()


async def ai_dialogue(user_question: str, rounds: int = 3) -> str:
    """–î–≤–∞ –ò–ò –æ–±—Å—É–∂–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—ã—Ç–∞—è—Å—å –ø—Ä–∏–π—Ç–∏ –∫ –ª—É—á—à–µ–º—É –æ—Ç–≤–µ—Ç—É."""
    print(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_question}\n")

    context = user_question
    for i in range(rounds):
        gpt_reply = await gpt_response(context)
        print(f"üîµ GPT –æ—Ç–≤–µ—á–∞–µ—Ç: {gpt_reply}\n")

        gemini_reply = await gemini_response(gpt_reply)
        print(f"üü¢ Gemini –æ—Ç–≤–µ—á–∞–µ—Ç: {gemini_reply}\n")

        context += f"\nGPT —Å–∫–∞–∑–∞–ª: {gpt_reply}\nGemini –æ—Ç–≤–µ—Ç–∏–ª: {gemini_reply}"

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ –æ—Ç GPT
    final_response = await gpt_response(
        context
        + "\n–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?"
    )
    return final_response


async def main(self, question: str):
    final_answer = await ai_dialogue(question)
    print("\nüéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò:")
    print(final_answer)
    return final_answer

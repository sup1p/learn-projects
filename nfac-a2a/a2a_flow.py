import asyncio
import re
from google.generativeai import GenerativeModel
import google.generativeai as genai
import os
import openai
from dotenv import load_dotenv

load_dotenv()

os.environ["GOOGLE_API_KEY"] = os.getenv("GOOGLE_API_KEY")
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")


def extract_evaluations(text: str) -> list[dict]:
    """
    Extracts scores, comments, and names for multiple startup ideas from text.
    """
    idea_blocks = re.split(r"(?=\d+-–∞—è –∏–¥–µ—è:)", text)
    results = []

    for block in idea_blocks:
        if not block.strip() or "–û—Ü–µ–Ω–∫–∞:" not in block:
            continue

        score_match = re.search(r"–û—Ü–µ–Ω–∫–∞:\s*(\d)", block)
        comment_match = re.search(
            r"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\s*(.*?)(?=\n\s*–ù–∞–∑–≤–∞–Ω–∏–µ:|$)", block, re.DOTALL
        )
        name_match = re.search(r"–ù–∞–∑–≤–∞–Ω–∏–µ:\s*(.*)", block, re.DOTALL)

        score = int(score_match.group(1)) if score_match else 0
        comment = comment_match.group(1).strip() if comment_match else "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        name = name_match.group(1).strip() if name_match else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        results.append({"score": score, "comment": comment, "name": name})

    return results


async def evaluate_idea(ideas: str) -> list[dict]:
    """
    Evaluates startup ideas using OpenAI's GPT model.
    """
    client = openai.AsyncOpenAI()
    try:
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –≤–µ–Ω—á—É—Ä–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö."},
                {
                    "role": "user",
                    "content": f"""
–û—Ü–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∏–¥–µ–∏ –ò–ò-—Å—Ç–∞—Ä—Ç–∞–ø–∞ –æ—Ç 1 –¥–æ 5 –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –≤ –≤–µ–Ω—á—É—Ä–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ —ç—Ç–æ –≤–µ–±-—Å–∞–π—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–ª–∏ –ø—Ä–∏–≤–ª–µ—á—å –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1-–∞—è –∏–¥–µ—è:
    –û—Ü–µ–Ω–∫–∞: X
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –¢–µ–∫—Å—Ç
    –ù–∞–∑–≤–∞–Ω–∏–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏

2-–∞—è –∏–¥–µ—è:
    –û—Ü–µ–Ω–∫–∞: X
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –¢–µ–∫—Å—Ç
    –ù–∞–∑–≤–∞–Ω–∏–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏

3-–∞—è –∏–¥–µ—è:
    –û—Ü–µ–Ω–∫–∞: X
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –¢–µ–∫—Å—Ç
    –ù–∞–∑–≤–∞–Ω–∏–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏

–ò–¥–µ–∏: {ideas}
""",
                },
            ],
        )
        content = response.choices[0].message.content
        return extract_evaluations(content)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∏–¥–µ–∏: {e}")
        return []


genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
gemini_model = GenerativeModel("gemini-1.5-flash-latest")


async def generate_idea() -> str:
    """
    Generates three unique AI startup ideas using Google's Gemini model.
    """
    prompt = "–ü—Ä–∏–¥—É–º–∞–π —Ç—Ä–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –ò–ò-—Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ –≤–µ–±-—Å–∞–π—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–ª–∏ –ø—Ä–∏–≤–ª–µ—á—å –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ\n2. –ù–∞–∑–≤–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ\n3. –ù–∞–∑–≤–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ"
    response = await gemini_model.generate_content_async(prompt)
    return response.text.strip()


async def main():
    white_list, black_list = [], []

    while len(white_list) < 3:
        ideas_text = await generate_idea()
        print(f"\nüîπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–¥–µ–∏:\n{ideas_text}")

        evaluations = await evaluate_idea(ideas_text)

        if not evaluations:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –¥–ª—è –∏–¥–µ–π. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.")
            black_list.append(
                {"name": "–ò–¥–µ–∏ –±–µ–∑ –æ—Ü–µ–Ω–∫–∏", "comment": ideas_text, "score": 0}
            )
            continue

        for evaluation in evaluations:
            if len(white_list) >= 3:
                break

            score = evaluation["score"]
            comment = evaluation["comment"]
            name = evaluation["name"]

            print(f"\n–ò–¥–µ—è: {name}")
            print(f"üí¨ –û—Ü–µ–Ω–∫–∞ –∞–≥–µ–Ω—Ç–∞: {score}/5\nüó£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

            if score >= 4:
                white_list.append(evaluation)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ white-–ª–∏—Å—Ç!")
            else:
                black_list.append(evaluation)
                print("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ black-–ª–∏—Å—Ç.")

        print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(white_list)}/3 —Ö–æ—Ä–æ—à–∏—Ö –∏–¥–µ–π\n")

    print("\nüéâ 3 –æ—Ç–ª–∏—á–Ω—ã–µ –∏–¥–µ–∏ –Ω–∞–π–¥–µ–Ω—ã!\n=== WHITE LIST ===")
    for i, idea in enumerate(white_list, 1):
        print(f"{i}. {idea['name']} (–û—Ü–µ–Ω–∫–∞: {idea['score']})\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {idea['comment']}")

    print("\n=== BLACK LIST ===")
    for i, idea in enumerate(black_list, 1):
        print(f"{i}. {idea['name']} (–û—Ü–µ–Ω–∫–∞: {idea['score']})\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {idea['comment']}")


if __name__ == "__main__":
    asyncio.run(main())